# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Organization {
  nit: String
  logo: String
  type: String
  name: String
  country: String
  city: String
  website: String
}

type Answers {
  id: Int
  value: Float
  content: String
  type: String
}

type QuestionAnswers {
  id: Int
  question: Int
  answer: Int
  answer_relation: Answers
}

type Questions {
  id: Int
  content: String
  description: String
  area_id: Float
  type: String
  image: String
  is_main: Boolean
  question_answers: [QuestionAnswers!]
}

type Area {
  id: Int
  name: String
  question: [Questions!]
}

type Project {
  id: ID!
  name: String!
  type: String!
  celebration_day: DateTime!
  deadline: DateTime!
  description: String!
  obj_general: String
  obj_specifics: [String!]
  budget: Int
  software: String
  state: String
  leader_id: Float
  image: String
  org_id: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AreaModel {
  id: Int!
  name: String!
  image: String!
  color: String!
  description: String!
}

type Role {
  id: Int!
  name: String!
  active: Boolean!
}

type Resources {
  id: Int!
  file: String!
  name: String!
  project_id: Int!
  activity_id: Int!
  created_at: DateTime!
}

type Response {
  status: Int!
  message: String!
}

type Report {
  date: DateTime
  amount: Int
}

type RevenueReport {
  org_id: Int
  project_id: String
  budget: String
  revenue_reports: [Report!]
  budget_reports: [Report!]
}

type Query {
  getAllRoles: [Role!]!
  getAllAreas(type: String!): [AreaModel!]!
  getAllResources(project_id: Float!): [Resources!]!
  getAllProjects(org_id: Int!): [Project!]!
  getOneProject(id: Float!): Project!
  getOneOrganization(nit: String!): Organization!
  getOrganizationCollaborators(nit: Float!): Organization!
  getProjectRevenues(input: RevenueDataDTO!): RevenueReport!
  diagnosisTest: [Area!]!
}

input RevenueDataDTO {
  org_id: Float
  project_id: Float
}

type Mutation {
  createOrganization(input: CreateOrganizationDTO!): Organization!
  loginOrganization(input: LoginOrganizationDTO!): Organization!
  createProject(input: CreateProjectDTO!): Project!
  assignArea(input: AssignAreaDTO!): AreaModel!
  createRole(input: CreateRolDTO!): Role!
  deleteProject(id: Float!): Project!
  addRevenuesReport(input: RevenueReportDTO!): Response!
  addNewBudget(input: BudgetReportDTO!): Response!
  mainSignUp(input: MainSignUpDTO!): Organization!
}

input CreateOrganizationDTO {
  nit: String
  name: String
  type: String!
  logo: String
  country: String
  city: String
  website: String
}

input LoginOrganizationDTO {
  email: String!
  password: String
}

input CreateProjectDTO {
  name: String
  key: String
  type: String
  celebration_day: DateTime!
  deadline: DateTime!
  description: String
  obj_general: String
  obj_specifics: [String!]
  budget: Int
  software: String
  state: String
  leader_id: Float
  image: String
  org_id: Int
  token: String
  cloud_id: String
  lead_account_id: String
  project_type_key: String
  project_template_key: String
}

input AssignAreaDTO {
  id: Int
  type: String
  name: String
  image: String
  color: String
  description: String
}

input CreateRolDTO {
  id: ID
  name: String!
  active: Boolean
}

input RevenueReportDTO {
  org_id: Float
  project_id: Float
  date: DateTime
  amount: Float
}

input BudgetReportDTO {
  org_id: Float
  project_id: Float
  amount: Float
  date: DateTime
}

input MainSignUpDTO {
  user: UserObj!
  organization: OrgObj!
  test: [TestObj!]!
}

input UserObj {
  email: String
  name: String
  phone: String
  last_name: String
  country: String
  city: String
  password: String
}

input OrgObj {
  name: String!
  type: String!
  nit: String!
  city: String!
  country: String!
}

input TestObj {
  question_id: Float!
  answer_id: Float!
}

type Subscription {
  projectCreated(name: String!): Organization!
}